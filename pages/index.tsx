import Head from "next/head";
import Maps from "./maps";
import {
  Box,
  Text,
  Flex,
  HStack,
  Card,
  CardHeader,
  Heading,
  CardBody,
  Stack,
  StackDivider,
  Button,
} from "@chakra-ui/react";
import axios from "axios";
import { useState } from "react";

const getDrivers = async (location: string, setNearbyDrivers: any) => {
  try {
    const res = await axios.get(`${process.env.BASE_URL}/api/user/${location}`);

    if (res?.data.length > 0) {
      setNearbyDrivers(res?.data);
    } else {
      setNearbyDrivers("No drivers found");
    }
  } catch (err) {
    console.log({ err });
  }
};

const bookDriver = async (id: string, setCurrentBookedDriver: any) => {
  try {
    const res = await axios.put(`${process.env.BASE_URL}/api/user`, {
      bookingStatus: "booked",
      id,
    });

    if (res?.data) {
      setCurrentBookedDriver(id);
      return alert("Booked");
    }
  } catch (err) {
    console.log({ err });
  }
};

export default function Home() {
  const [nearbyDrivers, setNearbyDrivers] = useState<any>(null);
  const [currentBookedDriver, setCurrentBookedDriver] = useState<any>(null);

  const renderRiders = () => {
    if (nearbyDrivers === null) return null;
    return nearbyDrivers?.length > 0 && typeof nearbyDrivers !== "string" ? (
      nearbyDrivers?.map((driver: any) => {
        return (
          <Box
            p={4}
            borderRadius="lg"
            m={4}
            bgColor="white"
            shadow="base"
            // minW="container.md"
            zIndex="2"
            key={driver?.id}
          >
            <Box flexGrow={1}>
              <Card>
                <CardHeader>
                  <Heading size="md">Available Drivers</Heading>
                </CardHeader>

                <CardBody>
                  <Stack divider={<StackDivider />} spacing="4">
                    <Box>
                      <Heading size="xs" textTransform="uppercase">
                        {driver?.firstName} {driver?.lastName}
                      </Heading>
                      <Text pt="2" fontSize="sm">
                        <b>Current Location:</b> {driver?.currentLocation}
                      </Text>
                      <Text pt="2" fontSize="sm">
                        <b>Age:</b> {driver?.age}
                      </Text>

                      <Button
                        colorScheme={
                          currentBookedDriver === driver?.id ? "red" : "green"
                        }
                        mt={3}
                        height={35}
                        fontSize={14}
                        onClick={() =>
                          bookDriver(driver?.id, setCurrentBookedDriver)
                        }
                      >
                        {currentBookedDriver === driver?.id
                          ? "Booked"
                          : "Book Driver"}
                      </Button>
                    </Box>
                  </Stack>
                </CardBody>
              </Card>
            </Box>
          </Box>
        );
      })
    ) : (
      <Box
        p={4}
        borderRadius="lg"
        m={4}
        bgColor="white"
        shadow="base"
        // minW="container.md"
        zIndex="2"
      >
        <Box flexGrow={1}>
          <Card>
            <CardHeader>
              <Heading size="md">Available Drivers</Heading>
            </CardHeader>

            <CardBody>
              <Stack divider={<StackDivider />} spacing="4">
                <Box>
                  <Heading size="xs" textTransform="uppercase">
                    {nearbyDrivers}
                  </Heading>
                </Box>
              </Stack>
            </CardBody>
          </Card>
        </Box>
      </Box>
    );
  };

  return (
    <>
      <Head>
        <title>Ride Share</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="main-container">
          <div className="header">
            <h3>Ride Share</h3>
            <div className="menu-right">
              <div>Login</div>
              <div>Register</div>
            </div>
          </div>
        </div>
        <Flex
          position="relative"
          flexDirection="column"
          alignItems="left"
          h="100vh"
          w="100vw"
          pt={10}
          pl={10}
        >
          <HStack spacing={2}>
            <>
              <Maps
                getDrivers={getDrivers}
                setNearbyDrivers={setNearbyDrivers}
                nearbyDrivers={nearbyDrivers}
              />
              {renderRiders()}
            </>
          </HStack>
        </Flex>
      </main>
    </>
  );
}
